#pragma once
#include "myString.h"

/*
Описать производный от СТРОКА класс БИТОВАЯ_СТРОКА.
Строки данного класса могут содержать только символы ‘0’ или ‘1’. Если в составе инициализирующей 
строки будут встречены любые символы, отличные от допустимых, БИТОВАЯ_СТРОКА принимает нулевое значение. 
Содержимое данных строк рассматривается как двоичное число.
Отрицательные числа хранятся в дополнительном коде!!!!!
Обязательные методы:
конструктор без параметров
конструктор, принимающий в качестве параметра Си-строку
конструктор копирования
деструктор;
изменение знака на противоположный (перевод числа в дополнительный код). 
присваивание (=);
сложение (+);
плюс равно(+=)
проверка на равенство (= =) и неравенство(+=);
*/

class bitString :
    public myString
{
private:
    bool biTester(const char* str);
public:
    bitString();                                        //конструктор по умолчанию
    bitString(const char* str) : myString(str)          //конструктор принимающий строку
    {    
            if (biTester(str)) {}
            else { this->str = nullptr, length = 0; }      
    };         
    bitString(const bitString& other) : myString(other) {};                 //конструктор копирования
    
    ~bitString();                                      //деструктор

                                            //Операторы
  
    bitString& operator=(const bitString& other);                   //оператор присваивания	 
    bitString operator+(bitString& other);						    //оператор сложения
    bitString operator+=(bitString& other);						//оператор плюс равно

    bool operator==(bitString& other);							//оператор сравнения равно
    bool operator!=(bitString& other);							//оператор сравнения не равно

    void display();

};

